@*<div class="editorContainer">
    <div id="modelHeader" class="paneheader">
        <div class="title">
            Model</div>
        <div class="tabBar">
            <a href="#simple">Simple</a><span class="separator">|</span><a href="#geeky"> Geeky</a>
        </div>
    </div>
    <div id="modelEditor" class="editor model">
    </div>
    <div id="modelGrid" class="editor model">
    </div>
</div>*@
<div class="editorContainer">
    <table id="modelPane">
        <tr>
            <td>
                <div class="paneheader">
                    <div class="title">
                        Model</div>
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <div class="tabBar">
                    <a href="#simple">Simple</a><span class="separator">|</span><a href="#geeky"> Geeky</a>
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <input type="text" id="propinput" style="width: 100%; display: block;" />
                <table id="modelGrid">
                    <colgroup>
                        <col width="50%" align="left" />
                        <col width="50%" align="left" />
                    </colgroup>
                    <tbody>
                        <tr>
                            <td>
                                &nbsp;
                            </td>
                            <td>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </td>
        </tr>
    </table>
</div>
<script type="text/javascript" charset="utf-8">


    var modelProps = modelProps || [];

    var addPropRow = function (data) {
        $('#modelGrid tbody').prepend(String.format("<tr title=\"{2} {0};\"><td><span class='name'>{0}</span></td><td><span class='value'>{1}</span></td></tr>", data.name, data.value, data.type));
    };


    var addToModel = function (txt) {
        var parts = txt.replace(/^\s*/, '').replace(/[;\s]*$/, '').split(' ');
        var prop = { type: parts[0], name: parts[1], value: parts[parts.length - 1].replace(/^"/, '').replace(/"$/, '') };
        modelProps.push(prop);
        addPropRow(prop);
    };

    $(function () {
        // ace editor needs explicityly sized div


        $('#modelHeader').hpTabs().watermark('model');

        $('#propinput').bind('keypress blur', function (e) {
            if (this.value.replace(/^\s*/, '').replace(/[;\s]*$/, '').length === 0) { return; }
            if (e.type === 'keypress' && e.keyCode !== 13) { return; }
            addToModel(this.value);
            this.value = '';
            return false;
        });

        $('#propinput').val('string Name = "world";');
        //resizeEditor($('#modelEditor'));
        //        var modelEditor = ace.edit("modelEditor");
        //        var CSharpMode = require("ace/mode/csharp").Mode;
        //        modelEditor.getSession().setMode(new CSharpMode());

        $('#modelGrid > tbody').delegate('td', 'click', function () {
            $(this).children('span').attr('contentEditable', 'true').focus();
        });
        $('#modelGrid > tbody').delegate('td span', 'keypress blur', function (e) {
            if (e.type === 'keypress' && e.keyCode !== 13) { return; }
            $(this).attr('contentEditable', 'false');
        });

        $(window).resize(function () { resizeEditor($('#modelEditor')); });
    });
</script>
